操作指南：

首先在作为服务器的主机上开启服务端

  Dispatcher dispatcher = MessageDispatcher.getInstance();
  
  //默认读取目录下的配置文件
  SocketConfiguration conf = new SocketConfiguration();
  //可以指定配置文件，不需指定的置为null
  //SocketConfiguration conf = new SockerConfiguration(String serverConf, String clientConf);

  dispatcher.dispatchServerOnTerminal(SocketConfiguration conf);

然后是客户端

如果只是简单的在终端进行传输任务，则可以

  Dispatcher dispatcher = MessageDispatcher.getInstance();

  dispatcher.dispatchClientOnTerminal(String clientToken, SocketConfiguration conf);

如果是做成应用，比如一个可视化的聊天软件，则可以

MessageHandler mm = dispatcher.dispatchClientOnApplication(SocketConfiguration conf, String clientToken);

应用层使用这个MessageHandler消息管理器来进行通讯操作

它里面有两个主要方法

弟一个方法是void sendMessage(Vector<String> clients, String message);

第一个参数是用户唯一标识，从一对一到群聊可以对应的添加一到多个用户

第二个参数则是要发送的消息内容

第二个方法是String receiveMessage();
这是一个阻塞方法，通常放在一个循环内就可以，只有收到消息才会继续往下走，没收到则阻塞在此位置继续等待

另外退出应用的时候记得调用closeClient方法

关于是否为局域网的boolean类型参数，如果是局域网的话，服务端给用户的标识为用户局域网ip加上用户唯一标识比如x.x.x.x/UserId，若为非局域网那么会多加一个外网ip比如x.x.x.x/x.x.x.x/UserId，根据实际情况传参即可。

日志模块目前就是简单的在服务端记录服务端和客户连接的情况保存在server.log里，有更详细的需要可以自行改动
